/*
visibility_polygon.js version 1.9

This code is released into the public domain - attribution is appreciated but not required.
Made by Byron Knoll.

https://github.com/byronknoll/visibility-polygon-js
*/
function VisibilityPolygon(){}const VISIBILITYPOLYGON_EPSILON=1e-7;VisibilityPolygon.compute=function(i,n){for(var o=[],t=i[0],l=i[1],e=i[0],r=i[1],s=0;s<n.length;++s){for(var y=0;y<2;++y)t=Math.min(t,n[s][y][0]),l=Math.min(l,n[s][y][1]),e=Math.max(e,n[s][y][0]),r=Math.max(r,n[s][y][1]);o.push([[n[s][0][0],n[s][0][1]],[n[s][1][0],n[s][1][1]]])}--t,--l,++e,++r,o.push([[t,l],[e,l]]),o.push([[e,l],[e,r]]),o.push([[e,r],[t,r]]),o.push([[t,r],[t,l]]);for(var g=[],a=VisibilityPolygon.sortPoints(i,o),P=new Array(o.length),s=0;s<P.length;++s)P[s]=-1;for(var u=[],V=[i[0]+1,i[1]],s=0;s<o.length;++s){var b=VisibilityPolygon.angle(o[s][0],i),h=VisibilityPolygon.angle(o[s][1],i),f=!1;b>-180&&b<=0&&h<=180&&h>=0&&h-b>180&&(f=!0),h>-180&&h<=0&&b<=180&&b>=0&&b-h>180&&(f=!0),f&&VisibilityPolygon.insert(s,u,i,o,V,P)}for(var s=0;s<a.length;){var v=!1,c=!1,I=s,p=o[a[s][0]][a[s][1]],L=u[0];do if(P[a[s][0]]!=-1?(a[s][0]==L&&(v=!0,p=o[a[s][0]][a[s][1]]),VisibilityPolygon.remove(P[a[s][0]],u,i,o,p,P)):(VisibilityPolygon.insert(a[s][0],u,i,o,p,P),u[0]!=L&&(c=!0)),++s,s==a.length)break;while(a[s][2]<a[I][2]+VISIBILITYPOLYGON_EPSILON);if(v){g.push(p);var O=VisibilityPolygon.intersectLines(o[u[0]][0],o[u[0]][1],i,p);VisibilityPolygon.equal(O,p)||g.push(O)}else c&&(g.push(VisibilityPolygon.intersectLines(o[L][0],o[L][1],i,p)),g.push(VisibilityPolygon.intersectLines(o[u[0]][0],o[u[0]][1],i,p)))}return g},VisibilityPolygon.computeViewport=function(i,n,o,t){for(var l=[],e=[[o[0],o[1]],[t[0],o[1]],[t[0],t[1]],[o[0],t[1]]],r=0;r<n.length;++r)if(!(n[r][0][0]<o[0]&&n[r][1][0]<o[0]||n[r][0][1]<o[1]&&n[r][1][1]<o[1]||n[r][0][0]>t[0]&&n[r][1][0]>t[0]||n[r][0][1]>t[1]&&n[r][1][1]>t[1])){for(var s=[],y=0;y<e.length;++y){var g=y+1;if(g==e.length&&(g=0),VisibilityPolygon.doLineSegmentsIntersect(n[r][0][0],n[r][0][1],n[r][1][0],n[r][1][1],e[y][0],e[y][1],e[g][0],e[g][1])){var a=VisibilityPolygon.intersectLines(n[r][0],n[r][1],e[y],e[g]);if(2!=a.length)continue;if(VisibilityPolygon.equal(a,n[r][0])||VisibilityPolygon.equal(a,n[r][1]))continue;s.push(a)}}for(var P=[n[r][0][0],n[r][0][1]];s.length>0;){for(var u=0,V=VisibilityPolygon.distance(P,s[0]),y=1;y<s.length;++y){var b=VisibilityPolygon.distance(P,s[y]);b<V&&(V=b,u=y)}l.push([[P[0],P[1]],[s[u][0],s[u][1]]]),P[0]=s[u][0],P[1]=s[u][1],s.splice(u,1)}l.push([P,[n[r][1][0],n[r][1][1]]])}for(var h=[],r=0;r<l.length;++r)VisibilityPolygon.inViewport(l[r][0],o,t)&&VisibilityPolygon.inViewport(l[r][1],o,t)&&h.push([[l[r][0][0],l[r][0][1]],[l[r][1][0],l[r][1][1]]]);var f=1e-6;return h.push([[o[0]-f,o[1]-f],[t[0]+f,o[1]-f]]),h.push([[t[0]+f,o[1]-f],[t[0]+f,t[1]+f]]),h.push([[t[0]+f,t[1]+f],[o[0]-f,t[1]+f]]),h.push([[o[0]-f,t[1]+f],[o[0]-f,o[1]-f]]),VisibilityPolygon.compute(i,h)},VisibilityPolygon.inViewport=function(i,n,o){return!(i[0]<n[0]-VISIBILITYPOLYGON_EPSILON)&&(!(i[1]<n[1]-VISIBILITYPOLYGON_EPSILON)&&(!(i[0]>o[0]+VISIBILITYPOLYGON_EPSILON)&&!(i[1]>o[1]+VISIBILITYPOLYGON_EPSILON)))},VisibilityPolygon.inPolygon=function(i,n){for(var o=n[0][0],t=0;t<n.length;++t)o=Math.min(n[t][0],o),o=Math.min(n[t][1],o);for(var l=[o-1,o-1],e=0,t=0;t<n.length;++t){var r=t+1;if(r==n.length&&(r=0),VisibilityPolygon.doLineSegmentsIntersect(l[0],l[1],i[0],i[1],n[t][0],n[t][1],n[r][0],n[r][1])){var s=VisibilityPolygon.intersectLines(l,i,n[t],n[r]);if(VisibilityPolygon.equal(i,s))return!0;VisibilityPolygon.equal(s,n[t])?VisibilityPolygon.angle2(i,l,n[r])<180&&++e:VisibilityPolygon.equal(s,n[r])?VisibilityPolygon.angle2(i,l,n[t])<180&&++e:++e}}return e%2!=0},VisibilityPolygon.convertToSegments=function(i){for(var n=[],o=0;o<i.length;++o)for(var t=0;t<i[o].length;++t){var l=t+1;l==i[o].length&&(l=0),n.push([[i[o][t][0],i[o][t][1]],[i[o][l][0],i[o][l][1]]])}return n},VisibilityPolygon.breakIntersections=function(i){for(var n=[],o=0;o<i.length;++o){for(var t=[],l=0;l<i.length;++l)if(o!=l&&VisibilityPolygon.doLineSegmentsIntersect(i[o][0][0],i[o][0][1],i[o][1][0],i[o][1][1],i[l][0][0],i[l][0][1],i[l][1][0],i[l][1][1])){var e=VisibilityPolygon.intersectLines(i[o][0],i[o][1],i[l][0],i[l][1]);if(2!=e.length)continue;if(VisibilityPolygon.equal(e,i[o][0])||VisibilityPolygon.equal(e,i[o][1]))continue;t.push(e)}for(var r=[i[o][0][0],i[o][0][1]];t.length>0;){for(var s=0,y=VisibilityPolygon.distance(r,t[0]),l=1;l<t.length;++l){var g=VisibilityPolygon.distance(r,t[l]);g<y&&(y=g,s=l)}n.push([[r[0],r[1]],[t[s][0],t[s][1]]]),r[0]=t[s][0],r[1]=t[s][1],t.splice(s,1)}n.push([r,[i[o][1][0],i[o][1][1]]])}return n},VisibilityPolygon.equal=function(i,n){return Math.abs(i[0]-n[0])<VISIBILITYPOLYGON_EPSILON&&Math.abs(i[1]-n[1])<VISIBILITYPOLYGON_EPSILON},VisibilityPolygon.remove=function(i,n,o,t,l,e){if(e[n[i]]=-1,i==n.length-1)return void n.pop();n[i]=n.pop(),e[n[i]]=i;var r=i,s=VisibilityPolygon.parent(r);if(0!=r&&VisibilityPolygon.lessThan(n[r],n[s],o,t,l))for(;r>0;){var s=VisibilityPolygon.parent(r);if(!VisibilityPolygon.lessThan(n[r],n[s],o,t,l))break;e[n[s]]=r,e[n[r]]=s;var y=n[r];n[r]=n[s],n[s]=y,r=s}else for(;;){var g=VisibilityPolygon.child(r),a=g+1;if(g<n.length&&VisibilityPolygon.lessThan(n[g],n[r],o,t,l)&&(a==n.length||VisibilityPolygon.lessThan(n[g],n[a],o,t,l))){e[n[g]]=r,e[n[r]]=g;var y=n[g];n[g]=n[r],n[r]=y,r=g}else{if(!(a<n.length&&VisibilityPolygon.lessThan(n[a],n[r],o,t,l)))break;e[n[a]]=r,e[n[r]]=a;var y=n[a];n[a]=n[r],n[r]=y,r=a}}},VisibilityPolygon.insert=function(i,n,o,t,l,e){var r=VisibilityPolygon.intersectLines(t[i][0],t[i][1],o,l);if(0!=r.length){var s=n.length;for(n.push(i),e[i]=s;s>0;){var y=VisibilityPolygon.parent(s);if(!VisibilityPolygon.lessThan(n[s],n[y],o,t,l))break;e[n[y]]=s,e[n[s]]=y;var g=n[s];n[s]=n[y],n[y]=g,s=y}}},VisibilityPolygon.lessThan=function(i,n,o,t,l){var e=VisibilityPolygon.intersectLines(t[i][0],t[i][1],o,l),r=VisibilityPolygon.intersectLines(t[n][0],t[n][1],o,l);if(!VisibilityPolygon.equal(e,r)){var s=VisibilityPolygon.distance(e,o),y=VisibilityPolygon.distance(r,o);return s<y}var g=0;VisibilityPolygon.equal(e,t[i][0])&&(g=1);var a=0;VisibilityPolygon.equal(r,t[n][0])&&(a=1);var P=VisibilityPolygon.angle2(t[i][g],e,o),u=VisibilityPolygon.angle2(t[n][a],r,o);return P<180?u>180||u<P:P<u},VisibilityPolygon.parent=function(i){return Math.floor((i-1)/2)},VisibilityPolygon.child=function(i){return 2*i+1},VisibilityPolygon.angle2=function(i,n,o){var t=VisibilityPolygon.angle(i,n),l=VisibilityPolygon.angle(n,o),e=t-l;return e<0&&(e+=360),e>360&&(e-=360),e},VisibilityPolygon.sortPoints=function(i,n){for(var o=new Array(2*n.length),t=0;t<n.length;++t)for(var l=0;l<2;++l){var e=VisibilityPolygon.angle(n[t][l],i);o[2*t+l]=[t,l,e]}return o.sort(function(i,n){return i[2]-n[2]}),o};const RAD_2_DEG=180/Math.PI;VisibilityPolygon.angle=function(i,n){return Math.atan2(n[1]-i[1],n[0]-i[0])*RAD_2_DEG},VisibilityPolygon.intersectLines=function(i,n,o,t){var l=t[0]-o[0],e=t[1]-o[1],r=n[0]-i[0],s=n[1]-i[1],y=e*r-l*s;if(0!=y){var g=(l*(i[1]-o[1])-e*(i[0]-o[0]))/y;return[i[0]-g*-r,i[1]-g*-s]}return[]},VisibilityPolygon.distance=function(i,n){var o=i[0]-n[0],t=i[1]-n[1];return o*o+t*t},VisibilityPolygon.doLineSegmentsIntersect=function(i,n,o,t,l,e,r,s){var y=o-i,g=t-n,a=r-l,P=s-e,u=-a*g+y*P;if(0===u)return!1;var V=(-g*(i-l)+y*(n-e))/u;if(V<0||V>1)return!1;var b=(a*(n-e)-P*(i-l))/u;return b>=0&&b<=1},"undefined"!=typeof module&&module.exports&&(module.exports=VisibilityPolygon);
//# sourceMappingURL=visibility_polygon.js.map